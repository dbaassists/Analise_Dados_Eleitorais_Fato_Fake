{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fato ou Fake? Vamos Analisar as Informa\u00e7\u00f5es Eleitorais com Python?","text":"<p>Trago hoje pra voc\u00ea um post bem interessante! N\u00e3o sei se voc\u00ea sabe mais no dia 16/08/2022 iniciou-se oficialmente a campanha eleitoral de 2022. Acredito que voc\u00ea tenha observado tamb\u00e9m que os ve\u00edculos de comunica\u00e7\u00e3o (jornais e internet) est\u00e3o divulgando diariamente estat\u00edsticas baseadas nas candidaturas.</p>"},{"location":"codigo/","title":"Codifica\u00e7\u00e3o da An\u00e1lise dos Dados Eleitorais","text":""},{"location":"codigo/#0-importacao-de-bibliotecas","title":"0 - Importa\u00e7\u00e3o de Bibliotecas","text":"<pre><code>import warnings\nimport pandas as pd\nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n</code></pre>"},{"location":"codigo/#1-importacao-de-dados-de-bens-de-candidatos-para-o-ano-eleitoral-2022","title":"1 - Importa\u00e7\u00e3o de Dados de Bens de Candidatos para o ano eleitoral 2022","text":"<pre><code>arquivoBensCandidatos = 'C:\\\\Temp\\\\Eleitoral\\\\BensCandidatos\\\\bem_candidato_2022_BRASIL.csv'\n\ndfBens = pd.read_csv( arquivoBensCandidatos\n                     , sep=';'\n                     , engine='python'\n                     , encoding='latin1',skiprows=1,header=None\n                     , usecols=[2,4,6,8,11,12,13,14,15,16]\n                    , names=['ANO_ELEICAO','NM_TIPO_ELEICAO','DS_ELEICAO','SG_UF','SQ_CANDIDATO','NR_ORDEM_CANDIDATO',\n                            'CD_TIPO_BEM_CANDIDATO','DS_BEM_CANDIDATO','DS_TIPO_BEM_CANDIDATO','VR_BEM_CANDIDATO']\n                    ,dtype={'ANO_ELEICAO':'str','NM_TIPO_ELEICAO':'str','DS_ELEICAO':'str','SG_UF':'str','SQ_CANDIDATO':'str',\n                            'NR_ORDEM_CANDIDATO':'str','CD_TIPO_BEM_CANDIDATO':'str','DS_BEM_CANDIDATO':'str',\n                            'DS_TIPO_BEM_CANDIDATO':'str','VR_BEM_CANDIDATO':'str'}\n                    )\n\ndfBens['VR_BEM_CANDIDATO'] = dfBens['VR_BEM_CANDIDATO'].str.replace(',', '.').astype(float)\n</code></pre>"},{"location":"codigo/#2-importacao-de-dados-de-candidatos-para-os-anos-eleitorais-de-2014-a-2022","title":"2 - Importa\u00e7\u00e3o de Dados de Candidatos para os anos eleitorais de 2014 \u00e0 2022","text":"<pre><code>diretorioCandidatos = 'C:\\\\Temp\\\\Eleitoral\\\\Candidatos\\\\'\n\ndfCandidatos = pd.DataFrame()\n\nfor arquivos in os.listdir(diretorioCandidatos):\n\n    arquivoCandidatos = diretorioCandidatos + arquivos \n\n    df = pd.read_csv(arquivoCandidatos\n                               , sep=';'\n                               , engine='python'\n                               , encoding='latin1'\n                               , header=0\n                               , usecols=[2,4,7,10,14,15,17,18,39,46,48,50,52,54]\n                               , names=['ANO_ELEICAO','NM_TIPO_ELEICAO','DS_ELEICAO','SG_UF','DS_CARGO','SQ_CANDIDATO'\n                                        ,'NM_CANDIDATO','NM_URNA_CANDIDATO','SG_UF_NASCIMENTO','DS_GENERO','DS_GRAU_INSTRUCAO',\n                                        'DS_ESTADO_CIVIL','DS_COR_RACA','DS_OCUPACAO'\n                                        ]\n                               , dtype={'ANO_ELEICAO':'str','NM_TIPO_ELEICAO':'str','DS_ELEICAO':'str',\n                                        'SG_UF':'str','DS_CARGO':'str','SQ_CANDIDATO':'str','NM_CANDIDATO':'str',\n                                        'NM_URNA_CANDIDATO':'str','SG_UF_NASCIMENTO':'str','DS_GENERO':'str',\n                                        'DS_GRAU_INSTRUCAO':'str','DS_ESTADO_CIVIL':'str','DS_COR_RACA':'str',\n                                        'DS_OCUPACAO':'str'\n                                        }\n                              )\n\n    dfCandidatos = pd.concat([dfCandidatos , df] , ignore_index=True )\n</code></pre>"},{"location":"codigo/#3-consolidacao-dos-bens-declarados-por-candidato-e-listagem-dos-10-mais-ricos","title":"3 - Consolida\u00e7\u00e3o dos Bens declarados por Candidato e listagem dos 10 mais ricos","text":"<pre><code>resultBensAgregado = dfBens.groupby(['SQ_CANDIDATO'],as_index=False) \\\n                            .agg(VLR_TOTAL_BEM=('VR_BEM_CANDIDATO','sum')) \\\n                            .sort_values(by=['VLR_TOTAL_BEM'],ascending=False) \\\n                            .astype(str)\n\nresultBensAgregado['VLR_TOTAL_BEM_C'] = resultBensAgregado['VLR_TOTAL_BEM'].astype(float)\n\nresultFinalBensCandidatos = pd.merge(left=resultBensAgregado\n, right=dfCandidatos\n, left_on='SQ_CANDIDATO'\n, right_on='SQ_CANDIDATO'\n)\n\nresultFinalBensCandidatos[['ANO_ELEICAO','SQ_CANDIDATO','NM_CANDIDATO','SG_UF','DS_CARGO','VLR_TOTAL_BEM']].head(10)\n</code></pre>"},{"location":"codigo/#4-criacao-de-de-para-e-calculo-do-percentual-de-candidatos-por-racacor","title":"4 - Cria\u00e7\u00e3o de De-Para e C\u00e1lculo do Percentual de Candidatos por Ra\u00e7a/Cor","text":"<pre><code>dfCandidatos.loc[dfCandidatos['DS_COR_RACA'].isin(['N\u00c3O DIVULG\u00c1VEL'\n                                                   ,'N\u00c3O INFORMADO'\n                                                   ,'IND\u00cdGENA'\n                                                   ,'AMARELA'\n                                                   ,'BRANCA'\n                                                   ,'PARDA'\n                                                   ,'PRETA']), 'DS_COR_RACA_TRATADA'] = 'COD_TOTAL'\ndfCandidatos.loc[dfCandidatos['DS_COR_RACA'].isin(['PARDA','PRETA']), 'DS_COR_RACA_TRATADA'] = 'COR_NEGRA'\ndfCandidatos.loc[dfCandidatos['DS_COR_RACA'].isin(['BRANCA']), 'DS_COR_RACA_TRATADA'] = 'COR_BRANCA'\ndfCandidatos.loc[dfCandidatos['DS_COR_RACA'].isin(['AMARELA']), 'DS_COR_RACA_TRATADA'] = 'COR_AMARELA'\ndfCandidatos.loc[dfCandidatos['DS_COR_RACA'].isin(['IND\u00cdGENA']), 'DS_COR_RACA_TRATADA'] = 'COR_IND\u00cdGENA'\ndfCandidatos.loc[dfCandidatos['DS_COR_RACA'].isin(['N\u00c3O DIVULG\u00c1VEL','N\u00c3O INFORMADO']), \n                 'DS_COR_RACA_TRATADA'] = 'COR_NAO_DIVULGAVEL'\n\ndfCanidatoCorRaca = dfCandidatos.groupby(['ANO_ELEICAO'\n                                          ,'DS_COR_RACA_TRATADA'],as_index=False).agg(QTD_CANDIDATO=('SQ_CANDIDATO','count'))\n\ndfCandidatos.loc[dfCandidatos['DS_COR_RACA'].isin(['N\u00c3O DIVULG\u00c1VEL'\n                                                   ,'N\u00c3O INFORMADO'\n                                                   ,'IND\u00cdGENA','AMARELA'\n                                                   ,'BRANCA'\n                                                   ,'PARDA'\n                                                   ,'PRETA']), 'DS_COR_RACA_TRATADA'] = 'TOTAL'\n\ndfCanidatoCorRacaoTotal = dfCanidatoCorRaca.groupby(['ANO_ELEICAO'],as_index=False) \\\n                                                .agg(QTD_CANDIDATO_TOTAL=('QTD_CANDIDATO','sum'))\n\nresultCandidatoCorRaca = pd.merge(left=dfCanidatoCorRaca\n, right=dfCanidatoCorRacaoTotal\n, left_on='ANO_ELEICAO'\n, right_on='ANO_ELEICAO'\n)\n\nresultCandidatoCorRaca['PERCENTUAL'] = (resultCandidatoCorRaca['QTD_CANDIDATO'] /\n                                        resultCandidatoCorRaca['QTD_CANDIDATO_TOTAL']) * 100\n\nresultgrafico = resultCandidatoCorRaca[resultCandidatoCorRaca['DS_COR_RACA_TRATADA'] == 'COR_NEGRA'] \\\n                    [['ANO_ELEICAO'\n                      ,'DS_COR_RACA_TRATADA'\n                      ,'PERCENTUAL']]\n\n</code></pre>"},{"location":"codigo/#41-grafico-criacao-de-de-para-e-calculo-do-percentual-de-candidatos-por-racacor","title":"4.1 - Gr\u00e1fico - Cria\u00e7\u00e3o de De-Para e C\u00e1lculo do Percentual de Candidatos por Ra\u00e7a/Cor","text":"<pre><code>#criando a fig e o ax no matplotlib\nfig, ax = plt.subplots(figsize=(8,5))\n#criando novamente o gr\u00e1fico\nsns.barplot(x='ANO_ELEICAO',y='PERCENTUAL',data=resultgrafico,ax=ax)\n#modifica\u00e7\u00e3o do fundo\nax.set_frame_on(False)\n#adicionando um t\u00edtulo\nax.set_title('Percentual Candidatos Negros',loc='center',pad=30,fontdict={'fontsize':20},color='#3f3f4e')\n#retirando o eixo y\nax.get_yaxis().set_visible(False)\n#retirnado os ticks do eixo x\nax.tick_params(axis='x',length=0,labelsize=12,colors='black')\n#ajustando o t\u00edtulo do gr\u00e1fico\nax.set_xlabel('Anos de Elei\u00e7\u00e3o',labelpad=10,fontdict={'fontsize':10},color='black')\n#colocando os r\u00f3tulos\nfor retangulo in ax.patches:\n    ax.text(retangulo.get_x() + retangulo.get_width() / 2,\n          retangulo.get_height() + 2,\n          '{:.1f}'.format(float(retangulo.get_height())).replace(',','.'),\n          ha = 'center',\n          fontsize=10,color='black')\n#plotando o gr\u00e1fico\nplt.tight_layout();\n</code></pre>"},{"location":"codigo/#5-analise-de-bens-declarados-para-candidatos-religiosos","title":"5 - An\u00e1lise de Bens Declarados para Candidatos Religiosos","text":"<pre><code>v_primeiroNome = dfCandidatos[\"NM_URNA_CANDIDATO\"].str.split(\" \", n = 1, expand = True)\n\ndfCandidatos['PRIMEIRO_NOME']= v_primeiroNome[0] \n\ndfEvangelicos = dfCandidatos[(dfCandidatos['PRIMEIRO_NOME'].isin(['PASTOR'\n                                                                 ,'PASTORA'\n                                                                 ,'BISPO'\n                                                                 ,'BISPA'\n                                                                 ,'MISSIONARIO'\n                                                                 ,'MISSIONARIA'\n                                                                 ,'IRMAO'\n                                                                 ,'IRMA'\n                                                                 ,'APOSTOLO'\n                                                                 ,'APOSTOLA'])) \n                                                                 &amp; (dfCandidatos['ANO_ELEICAO']=='2022')]\n\ndfEvangelicos.groupby(['PRIMEIRO_NOME','ANO_ELEICAO'],as_index=False) \\\n                                                .agg(QTD_TOTAL_CANDIDATOS=('SQ_CANDIDATO','count')) \\\n                                                .sort_values(by=(['PRIMEIRO_NOME','QTD_TOTAL_CANDIDATOS']),ascending=False)\n\nresultFinalBensCandidatosEvangelicos = pd.merge(left=resultBensAgregado\n, right=dfEvangelicos\n, left_on='SQ_CANDIDATO'\n, right_on='SQ_CANDIDATO'\n)[['SQ_CANDIDATO','SG_UF','NM_CANDIDATO','PRIMEIRO_NOME','DS_CARGO','VLR_TOTAL_BEM','VLR_TOTAL_BEM_C']]\n\nresultFinalBensCandidatosEvangelicos.sort_values(by='VLR_TOTAL_BEM_C',ascending=False)[['SQ_CANDIDATO'\n                                                                                ,'SG_UF'\n                                                                                ,'NM_CANDIDATO'\n                                                                                ,'PRIMEIRO_NOME'\n                                                                                ,'DS_CARGO'\n                                                                                ,'VLR_TOTAL_BEM']].head(10)\n</code></pre>"},{"location":"codigo/#6-candidatos-a-governador-que-nao-sao-nativos-do-estado","title":"6 - Candidatos a Governador que n\u00e3o s\u00e3o Nativos do Estado","text":"<pre><code>resultSetCandidatoGovernador = dfCandidatos[(dfCandidatos['ANO_ELEICAO']=='2022') \n             &amp; (dfCandidatos['DS_CARGO']=='GOVERNADOR')][['SQ_CANDIDATO'\n                                                          ,'NM_CANDIDATO'\n                                                          ,'DS_CARGO'\n                                                          ,'SG_UF'\n                                                          ,'SG_UF_NASCIMENTO']]\n\nresultSetCandidatoGovernador.loc[resultSetCandidatoGovernador['SG_UF'] == resultSetCandidatoGovernador['SG_UF_NASCIMENTO'], \n                                 'COMPARACAO'] = 'NASCIDO NO ESTADO'\nresultSetCandidatoGovernador.loc[resultSetCandidatoGovernador['SG_UF'] != resultSetCandidatoGovernador['SG_UF_NASCIMENTO'], \n                                 'COMPARACAO'] = 'FORASTEIRO'\n\ndfCandidatosGovernadorTotal = dfCandidatos[(dfCandidatos['ANO_ELEICAO']=='2022') &amp; (dfCandidatos['DS_CARGO']=='GOVERNADOR')] \\\n                                .groupby(['ANO_ELEICAO','DS_CARGO'],as_index=False) \\\n                                .agg(QTD_CANDIDATO_GOVERNADOR=('SQ_CANDIDATO','count'))\n\nresultSetCandidatoGovernador = resultSetCandidatoGovernador.groupby(['DS_CARGO','COMPARACAO'],as_index=False) \\\n                                .agg(QTDCANDIDATO=('COMPARACAO','count'))\n\nresultFinalCandidatosGovernador = pd.merge(left=resultSetCandidatoGovernador\n                                            , right=dfCandidatosGovernadorTotal\n                                            , left_on='DS_CARGO'\n                                            , right_on='DS_CARGO'\n                                            )[['ANO_ELEICAO'\n                                               ,'DS_CARGO'\n                                               ,'COMPARACAO'\n                                               ,'QTDCANDIDATO'\n                                               ,'QTD_CANDIDATO_GOVERNADOR']]\n\nresultFinalCandidatosGovernador['PERCENTUAL'] = (resultFinalCandidatosGovernador['QTDCANDIDATO'] \n                                                 / resultFinalCandidatosGovernador['QTD_CANDIDATO_GOVERNADOR']) * 100\n\n\n</code></pre>"},{"location":"codigo/#61-grafico-candidatos-a-governador-que-nao-sao-nativos-do-estado","title":"6.1 - Gr\u00e1fico - Candidatos a Governador que n\u00e3o s\u00e3o Nativos do Estado","text":"<pre><code>#criando a fig e o ax no matplotlib\nfig, ax = plt.subplots(figsize=(8,5))\n#criando novamente o gr\u00e1fico\nsns.barplot(x='COMPARACAO',y='PERCENTUAL',data=resultFinalCandidatosGovernador,ax=ax)\n#modifica\u00e7\u00e3o do fundo\nax.set_frame_on(False)\n#adicionando um t\u00edtulo\nax.set_title('Percentual Candidatos Governador Nascidos No Estado',loc='center',pad=30,fontdict={'fontsize':20},color='#3f3f4e')\n#retirando o eixo y\nax.get_yaxis().set_visible(False)\n#retirnado os ticks do eixo x\nax.tick_params(axis='x',length=0,labelsize=12,colors='black')\n#ajustando o t\u00edtulo do gr\u00e1fico\nax.set_xlabel('Candidatos Governador Nascidos No Estado',labelpad=10,fontdict={'fontsize':10},color='black')\n#colocando os r\u00f3tulos\nfor retangulo in ax.patches:\n    ax.text(retangulo.get_x() + retangulo.get_width() / 2,\n          retangulo.get_height() + 2,\n          '{:.1f}'.format(float(retangulo.get_height())).replace(',','.'),\n          ha = 'center',\n          fontsize=10,color='black')\n#plotando o gr\u00e1fico\nplt.tight_layout();\n</code></pre>"},{"location":"codigo/#7-analise-de-candidatos-que-declararam-e-nao-declararam-patrimonios","title":"7 - An\u00e1lise de Candidatos que Declararam e N\u00e3o Declararam Patrim\u00f4nios","text":"<pre><code>resultFinalBensCandidatosDeclarado = pd.merge(left=dfCandidatos\n                                            , right=resultBensAgregado\n                                            , left_on='SQ_CANDIDATO'\n                                            , right_on='SQ_CANDIDATO'\n                                            , how='left'\n                                            )[['ANO_ELEICAO'\n                                               ,'SQ_CANDIDATO'\n                                               ,'NM_CANDIDATO'\n                                               ,'DS_CARGO'\n                                               ,'VLR_TOTAL_BEM'\n                                               ,'VLR_TOTAL_BEM_C']]\n\nresultFinalBensCandidatosDeclarado['VLR_TOTAL_BEM_C'].fillna(0,inplace=True)\nresultFinalBensCandidatosDeclarado['VLR_TOTAL_BEM_C'].fillna(0,inplace=True)\n\nresultFinalBensCandidatosDeclarado = resultFinalBensCandidatosDeclarado[\n                                    resultFinalBensCandidatosDeclarado['ANO_ELEICAO']=='2022']\n\nresultFinalBensCandidatosDeclarado.loc[resultFinalBensCandidatosDeclarado['VLR_TOTAL_BEM_C'].astype(float) == 0\n                                    , 'COMPARACAO'] = 'N\u00c3O DECLAROU BEM'\n\nresultFinalBensCandidatosDeclarado.loc[((resultFinalBensCandidatosDeclarado['VLR_TOTAL_BEM_C'].astype(float) &gt;= float(1)) \n                                    &amp; (resultFinalBensCandidatosDeclarado['VLR_TOTAL_BEM_C'].astype(float) &lt; float(1000000)))\n                                    ,'COMPARACAO'] = 'RICO'\n\nresultFinalBensCandidatosDeclarado.loc[((resultFinalBensCandidatosDeclarado['VLR_TOTAL_BEM_C'].astype(float) \n                                         &gt;= float(1000000)) \n                                    &amp; (resultFinalBensCandidatosDeclarado['VLR_TOTAL_BEM_C'].astype(float) &lt; float(1000000000)))\n                                    , 'COMPARACAO'] = 'MILIONARIO'\nresultFinalBensCandidatosDeclarado.loc[((resultFinalBensCandidatosDeclarado['VLR_TOTAL_BEM_C'].astype(float) \n                                         &gt;= float(1000000000))                                       \n                                &amp; (resultFinalBensCandidatosDeclarado['VLR_TOTAL_BEM_C'].astype(float) &lt; float(1000000000000)))\n                                , 'COMPARACAO'] = 'BILIONARIO'\n\nresultFinalBensCandidatosDeclaradoAgregado = resultFinalBensCandidatosDeclarado.groupby(['COMPARACAO','ANO_ELEICAO']\n                                    ,as_index=False).agg(QTD_CANDIDATO=('SQ_CANDIDATO','count'),VLR_TOTAL_BENS=('VLR_TOTAL_BEM_C','sum'))\n\nresultFinalBensCandidatosDeclaradoAgregado = pd.merge(left=resultFinalBensCandidatosDeclaradoAgregado\n, right=dfCanidatoCorRacaoTotal\n, left_on='ANO_ELEICAO'\n, right_on='ANO_ELEICAO'\n)[['ANO_ELEICAO','COMPARACAO','QTD_CANDIDATO','VLR_TOTAL_BENS','QTD_CANDIDATO_TOTAL']]\n\nresultFinalBensCandidatosDeclaradoAgregado['PERCENTUAL'] = (resultFinalBensCandidatosDeclaradoAgregado['QTD_CANDIDATO'] \n                                            / resultFinalBensCandidatosDeclaradoAgregado['QTD_CANDIDATO_TOTAL']) * 100\n</code></pre>"},{"location":"codigo/#71-grafico-percentual-analise-de-candidatos-que-declararam-e-nao-declararam-patrimonios","title":"7.1 - Gr\u00e1fico Percentual - An\u00e1lise de Candidatos que Declararam e N\u00e3o Declararam Patrim\u00f4nios","text":"<pre><code>#criando a fig e o ax no matplotlib\nfig, ax = plt.subplots(figsize=(8,5))\n#criando novamente o gr\u00e1fico\nsns.barplot(x='COMPARACAO',y='PERCENTUAL',data=resultFinalBensCandidatosDeclaradoAgregado,ax=ax)\n#modifica\u00e7\u00e3o do fundo\nax.set_frame_on(False)\n#adicionando um t\u00edtulo\nax.set_title('Percentual Candidatos Valores(R$) Vs Candidatos Que N\u00e3o Declaram Bens',loc='center',pad=30,fontdict={'fontsize':20},color='#3f3f4e')\n#retirando o eixo y\nax.get_yaxis().set_visible(False)\n#retirnado os ticks do eixo x\nax.tick_params(axis='x',length=0,labelsize=12,colors='black')\n#ajustando o t\u00edtulo do gr\u00e1fico\nax.set_xlabel('Categoriza\u00e7\u00e3o de Candidatos',labelpad=10,fontdict={'fontsize':10},color='black')\n#colocando os r\u00f3tulos\nfor retangulo in ax.patches:\n    ax.text(retangulo.get_x() + retangulo.get_width() / 2,\n          retangulo.get_height() + 2,\n          '{:.1f}'.format(float(retangulo.get_height())).replace(',','.'),\n          ha = 'center',\n          fontsize=10,color='black')\n#plotando o gr\u00e1fico\nplt.tight_layout();\n</code></pre>"},{"location":"codigo/#72-grafico-aberto-por-valor-analise-de-candidatos-que-declararam-e-nao-declararam-patrimonios","title":"7.2 - Gr\u00e1fico Aberto Por Valor - An\u00e1lise de Candidatos que Declararam e N\u00e3o Declararam Patrim\u00f4nios","text":"<pre><code>#criando a fig e o ax no matplotlib\nfig, ax = plt.subplots(figsize=(8,5))\n#criando novamente o gr\u00e1fico\nsns.barplot(x='COMPARACAO',y='VLR_TOTAL_BENS',data=resultFinalBensCandidatosDeclaradoAgregado,ax=ax)\n#modifica\u00e7\u00e3o do fundo\nax.set_frame_on(False)\n#adicionando um t\u00edtulo\nax.set_title('Percentual Candidatos Valores(R$) Vs Candidatos Que N\u00e3o Declaram Bens',loc='center',pad=30,fontdict={'fontsize':20},color='#3f3f4e')\n#retirando o eixo y\nax.get_yaxis().set_visible(False)\n#retirnado os ticks do eixo x\nax.tick_params(axis='x',length=0,labelsize=12,colors='black')\n#ajustando o t\u00edtulo do gr\u00e1fico\nax.set_xlabel('Categoriza\u00e7\u00e3o de Candidatos',labelpad=10,fontdict={'fontsize':10},color='black')\n#colocando os r\u00f3tulos\nfor retangulo in ax.patches:\n    ax.text(retangulo.get_x() + retangulo.get_width() / 2,\n          retangulo.get_height() + 2,\n          '{:.1f}'.format(float(retangulo.get_height())).replace(',','.'),\n          ha = 'center',\n          fontsize=10,color='black')\n#plotando o gr\u00e1fico\nplt.tight_layout();\n</code></pre>"},{"location":"regra_negocio/","title":"Regra de Neg\u00f3cio","text":""},{"location":"regra_negocio/#1-pontos-a-serem-analisados","title":"1 - Pontos a serem analisados","text":"<ul> <li>1.1 - Existem candidatos na Elei\u00e7\u00e3o 2022 que possui patrim\u00f4nio milion\u00e1rio;</li> </ul> <ul> <li>1.2 - O n\u00famero de candidatos negros na Elei\u00e7\u00e3o de 2022 bateu recorde quando comparado com o n\u00famero de candidatos inscritos em 2014 e 2018, per\u00edodo que passou a ter a declara\u00e7\u00e3o de cor/ra\u00e7a;</li> </ul> <ul> <li>1.3 - Candidatos religiosos (Pastores, Pastoras, Bispos, Bispas e outros) possuem patrim\u00f4nios milion\u00e1rios declarado;</li> </ul> <ul> <li> <p>1.4 - Quase 33% dos candidatos a Governador nas Elei\u00e7\u00f5es 2022 n\u00e3o s\u00e3o nativos do estado;</p> </li> <li> <p>1.5 - 38% dos candidatos n\u00e3o declaram patrim\u00f4nio, 12% s\u00e3o milion\u00e1rios e 1 \u00e9 bilion\u00e1rios.</p> </li> </ul> <p></p>"},{"location":"regra_negocio/#2-onde-encontro-os-arquivos-necessarios","title":"2 - Onde encontro os arquivos necess\u00e1rios?","text":"<ul> <li>2.1 - Esses dados s\u00e3o encontrados no diret\u00f3rio TSE</li> </ul>"}]}